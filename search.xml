<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GNL - get_next_line 42</title>
      <link href="2021/08/27/GNL-get-next-line-42/"/>
      <url>2021/08/27/GNL-get-next-line-42/</url>
      
        <content type="html"><![CDATA[<h1 id="Descricao"><a href="#Descricao" class="headerlink" title="Descrição"></a>Descrição</h1><p>O get_next_line é um programa que retornar uma linha do arquivo lido.</p><h2 id="O-que-sei-ate-agora"><a href="#O-que-sei-ate-agora" class="headerlink" title="O que sei até agora:"></a>O que sei até agora:</h2><h4 id="File-Descriptor-FD"><a href="#File-Descriptor-FD" class="headerlink" title="- File Descriptor (FD)"></a>- File Descriptor (FD)</h4><p>O file descriptor segundo o <a href="https://pt.wikipedia.org/wiki/Descritor_de_arquivo">wikipedia</a> é um indicador abstrato para indicar um arquivo.</p><p>No GNL iremos usar a função <code>read()</code> da biblioteca <code>&lt;unistd.h&gt;</code>. </p><h5 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h5><p> protótipo:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Anotacoes-gerais"><a href="#Anotacoes-gerais" class="headerlink" title="Anotações gerais."></a>Anotações gerais.</h5><p>[22/08/21]</p><p>O valor de <code>fd</code> é recebido na <code>main.c</code> através do função <code>open()</code>, seria algo do tipo: </p><p><code>fd = open(&quot;arquivo&quot;, O_RDONLY) </code> e o valor recebido de <code>fd</code> seria passado para o <code>get_next_line</code></p><p>minhas principais dúvidas são:</p><ul><li><input checked="" disabled="" type="checkbox"> Como saber que é a próxima linha? [check: 24/08]</li><li><input checked="" disabled="" type="checkbox"> a variável estática é usada para pegar a próxima linha? [check: 24/08]</li></ul><p>[24/08/21]</p><p>Descobri que a func <code>read()</code> volta a ler de onde o carrinho de leitura parou, essa era uma das preocupações que eu tive, de como eu controlaria para saber qual é a próxima linha. </p><p>Criei a função que lê a primeira parte e salva no buffer.</p><p>*<em>Não funcionou como deveria</em></p><p>[27/08/21]</p><p>Como tinha alguns trabalhos que precisavam ser entregues na faculdade, não consegui retornar antes para o GNL.</p><hr><details>    <summary>Mostrar código</summary>    <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ft_strchr</span><span class="token punctuation">(</span>save<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    r <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    aux <span class="token operator">=</span> save<span class="token punctuation">;</span>    save <span class="token operator">=</span> <span class="token function">ft_strjoin</span><span class="token punctuation">(</span>save<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>aux<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><p>O protótipo funcionou, a ideia que eu tive é ir guardando o buffer até achar o <code>&#39;\n&#39;</code>assim que ele acha o <code>&#39;\n&#39;</code> na string static que eu guardo tudo que o buffer recebe, o while termina e eu retorno até o <code>&#39;\n&#39;</code> e  em seguida guardo o restante na própria string static.</p><p>[06/09/21]</p><p>Aparentemente tudo funcionando, exceto pelo <code>TIME OUT</code> dado nos testes em que se tem um arquivo sem linha e muito grandes, mas vou tentar resolver assim que der.</p><hr><h5 id="Linha-geral"><a href="#Linha-geral" class="headerlink" title="Linha geral:"></a>Linha geral:</h5><p>A função <code>read_file</code> é autodescritiva, vou receber como parâmetro o fd do arquivo e a variavel estática. Nela eu crio um buffer com o tamnaho do <code>BUFFER_SIZE</code> e uso a função <code>read()</code> pra ler o arquivo até encontrar o final dele - que seria retornado 0 - ou até encontrar uma linha (<code>\n</code>) , caso ocorra algum erro, o laço de repetição é parado, libero a variavel buffer que tinha mallocado e retorno NULL, caso contrário, uso a função <code>ft_strjoin()</code> para juntar o conteúdo de backup com o buffer.</p><details>    <summary>Mostrar código</summary>    <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token function">read_file</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>backup<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token operator">*</span>buffer<span class="token punctuation">;</span>        <span class="token keyword">int</span>read_bytes<span class="token punctuation">;</span>        buffer <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>BUFFER_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read_bytes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>read_bytes <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">ft_strchr</span><span class="token punctuation">(</span>backup<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            read_bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>read_bytes <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>            buffer<span class="token punctuation">[</span>read_bytes<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            backup <span class="token operator">=</span> <span class="token function">ft_strjoin</span><span class="token punctuation">(</span>backup<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>read_bytes <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>backup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><p>A função <code>get_line()</code> faz o que o nome já diz, ela pega a linha. Como parâmetro ainda vamos usar o backup, faço uma verificação se a backup não está com o primeiro caracter como null byte (<code>&#39;\0&#39;</code>), percorro ela inteira até achar uma (<code>&#39;\n&#39;</code>) ou o final dela, crio com o malloc uma string com o tamanho que li + 2 espaços, pra caso haja um <code>\n</code> , eu coloque ele e logo em seguida o (<code>\0</code>)  e retorno essa linha.</p><details>    <summary>Mostrar código</summary>    <pre class="line-numbers language-c" data-language="c"><code class="language-c">   <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token function">get_line</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>backup<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span><span class="token operator">*</span>line<span class="token punctuation">;</span>  <span class="token class-name">size_t</span>size<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>backup<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>backup<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> backup<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>  line <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>line<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ft_strlcpy</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> backup<span class="token punctuation">,</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>backup<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    line<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>  line<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> c </tag>
            
            <tag> 42SP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conciliando Faculdade com os side projects</title>
      <link href="2021/05/03/Conciliando-Faculdade-com-os-side-projects/"/>
      <url>2021/05/03/Conciliando-Faculdade-com-os-side-projects/</url>
      
        <content type="html"><![CDATA[<h2 id="teste"><a href="#teste" class="headerlink" title="teste"></a>teste</h2>]]></content>
      
      
      
        <tags>
            
            <tag> vida </tag>
            
            <tag> programacao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Teste para estágio [back-end]</title>
      <link href="2021/03/03/Teste-para-estagio-back-end/"/>
      <url>2021/03/03/Teste-para-estagio-back-end/</url>
      
        <content type="html"><![CDATA[<h2 id="Inicio"><a href="#Inicio" class="headerlink" title="Inicio"></a>Inicio</h2><p>Bom, me submeti à uma vaga de estágio para back-end. O desafio é eu montar uma API <code>RESTful</code> e será um CRUD usando algum framework do tipo <code>express</code>  ou <code>Koa</code>  e um banco de dados relacional (que não é obrigatório). Há também um teste de <code>javascript</code>.</p><h3 id="Estudar"><a href="#Estudar" class="headerlink" title="Estudar"></a>Estudar</h3><p>Preciso estudar alguns assuntos antes de começar a desenvolver a aplicação, como sou noob na maior parte dos assuntos, vou separar de 2 a 3 dias para um estudo superficial afim de ter o conhecimento para realizar o desenvolvimento, e depois faço um estudo mais aprofundado.</p><h3 id="Topicos-a-serem-estudados"><a href="#Topicos-a-serem-estudados" class="headerlink" title="Tópicos a serem estudados"></a>Tópicos a serem estudados</h3><ul><li><input disabled="" type="checkbox"> SQL<ul><li><input checked="" disabled="" type="checkbox"> Principais comandos <code>[check: 03/03]</code></li><li><input disabled="" type="checkbox"> Relacionar tabelas</li></ul></li><li><input checked="" disabled="" type="checkbox"> PostgreSQL <code>[check: 03/03]</code><ul><li><input checked="" disabled="" type="checkbox"> Ler a documentação</li><li><input checked="" disabled="" type="checkbox"> Intalar na minha máquina</li><li><input checked="" disabled="" type="checkbox"> Configurar</li></ul></li><li><input checked="" disabled="" type="checkbox"> Knex.js<ul><li><input checked="" disabled="" type="checkbox"> Ler a documentação <code>[check: 03/03]</code></li><li><input checked="" disabled="" type="checkbox"> Integrar com nodeJS <code>[check: 04/03]</code></li><li><input checked="" disabled="" type="checkbox"> Configurar para postgresql <code>[check: 04/03]</code></li></ul></li></ul><h3 id="Configuracao-do-projeto"><a href="#Configuracao-do-projeto" class="headerlink" title="Configuração do projeto"></a>Configuração do projeto</h3><ul><li><input checked="" disabled="" type="checkbox"> Criar o projeto no github <code>[check: 03/03]</code></li><li><input checked="" disabled="" type="checkbox"> Separar as pastas do projeto <code>[check: 04/03]</code></li><li><input checked="" disabled="" type="checkbox"> Instalar o postgresql na minha máquina <code>[check: 03/03]</code></li><li><input checked="" disabled="" type="checkbox"> Instalar as dependência <code>[check: 04/03]</code></li></ul><h3 id="Observacoes"><a href="#Observacoes" class="headerlink" title="Observações"></a>Observações</h3><p><code>[03/03]</code> Fiz um apanhado geral das coisas que tinha que estudar, assisti alguns vídeos, li as documentações oficiais das ferramentas que ia usar. Criei mais ou menos a base da aplicação. Fiz também os exercícios em javascript puro, devem faltar ainda uns 5 a terminar.</p><p><code>[04/03]</code> Hoje comecei me aprofundando no knex.js e como integrar com o nodejs, ainda não entendi 100% mas to começando a caminhar. </p><ul><li><p>Consegui fazer o knex conectar ao postgres (aconteceram alguns erros, mas nada fora do normal, no print não apareceu, mas um dos erros ele não conectava ao banco, era só mudar a senha padrão com o comando <code>ALTER USER postgres PASSWORD &#39;senha&#39;;</code> )</p><p><a href="https://i.imgur.com/VAMIrex.png">erro apresentado - print</a></p></li><li><p>Tentei organizar a aplicação no modelo <code>MVC</code> e pelo que li, acho que tá organizado direito </p></li><li><p>Consegui também fazer as rotas get e post da rota <code>api/navers</code> , mas ainda falta retornar o obj do usuário criado.</p></li></ul><p><code>[05/03]</code> Não consegui pegar muito no projeto, tinha umas coisas para resolver. Mas fiz alguns ajustes e consegui retornar o usuário. No knex tem a função <code>.returning()</code> e acabei vendo <a href="https://www.youtube.com/watch?v=wfrn21E2NaU&ab_channel=productioncoder">nesse video</a> o cara usando e adaptei pra o que eu precisava, não sei se está correto mas funciona. </p><h4 id="Coisas-que-faltam-resolver"><a href="#Coisas-que-faltam-resolver" class="headerlink" title="Coisas que faltam resolver"></a>Coisas que faltam resolver</h4><p><code>[04/03]</code></p><ul><li><input checked="" disabled="" type="checkbox"> retorno da função <code>store</code> no controller <code>[check: 05/03]</code></li><li><input checked="" disabled="" type="checkbox"> criar tabela <code>projetos</code> <code>[07/03]</code></li></ul><h4 id="Finalizando"><a href="#Finalizando" class="headerlink" title="Finalizando"></a>Finalizando</h4><p><code>[08/03]</code> Sábado e domingo eu fiz poucas coisas, mas deixei bastante coisa adiantada. Hoje eu terminei de criar as rotas, fiz uma adaptação para que a data fosse exibida sem o timezone. Adicionei também a lib <code>helmet</code> pra dar uma segurança a aplicação.</p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> js </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mudando o tema do Hexo</title>
      <link href="2021/02/03/Mudando-o-tema-do-Hexo/"/>
      <url>2021/02/03/Mudando-o-tema-do-Hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="Introducao"><a href="#Introducao" class="headerlink" title="Introdução"></a>Introdução</h2><p>Para deixar o seu blog pessoal com seu estilo exitem variados temas que você pode instalar no Hexo. E como complemento do post ensinando a usar o Hexo, farei esse aqui para mostrar como é simples instalar um tema no Hexo.</p><h2 id="Procurando-um-tema"><a href="#Procurando-um-tema" class="headerlink" title="Procurando um tema"></a>Procurando um tema</h2><p>A primeira coisa que você precisa fazer é ir na sessão de <a href="https://hexo.io/themes/">temas</a> na página do Hexo e escolher o que mais te agrada.</p><h2 id="Instalando-o-tema-escolhido"><a href="#Instalando-o-tema-escolhido" class="headerlink" title="Instalando o tema escolhido"></a>Instalando o tema escolhido</h2><p>No meu caso eu escolhi o cactus, que no momento tá me agradando, então vamos instalar ele.</p><p>na pasta raiz do seu blog, digite:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https:&#x2F;&#x2F;github.com&#x2F;probberechts&#x2F;hexo-theme-cactus.git themes&#x2F;cactus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Agora vamos editar o <code>_config.yml</code> llá vamos trocar a tag <code>theme: default</code> para <code>theme: cactus</code> . Pronto, agora o tema tá instalado.</p><h2 id="Configurando-o-tema"><a href="#Configurando-o-tema" class="headerlink" title="Configurando o tema"></a>Configurando o tema</h2><p>Cada tema tem sua configuração, então na documentação de cada tema será mostrado como configurar passo-a-passo.</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> tema </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRUD com NodeJs + Express + Mongodb</title>
      <link href="2021/02/03/CRUD-com-NodeJs-Express-Mongodb/"/>
      <url>2021/02/03/CRUD-com-NodeJs-Express-Mongodb/</url>
      
        <content type="html"><![CDATA[<p>[Post em andamento, será acrescentado as informações de acordo com o avanço do meu estudo]</p><h2 id="Repositorio"><a href="#Repositorio" class="headerlink" title="Repositório"></a>Repositório</h2><p>O repositório no <a href="https://github.com/devhector/nodejs-CRUD">github</a> contém todas as dependências, faça o clone e dê um <code>npm install</code></p><h2 id="Inicio-do-projeto"><a href="#Inicio-do-projeto" class="headerlink" title="Início do projeto"></a>Início do projeto</h2><p>Caso não queira acessar o repositório, você pode digitar o seguinte comando no terminal <code>npm i body-parser express mongoose request dotenv</code> e será instalado as dependências que vamos utilizar.</p><h3 id="Criando-o-server"><a href="#Criando-o-server" class="headerlink" title="Criando o server"></a>Criando o server</h3><p>vamos criar um arquivo com o nome de <code>server.js</code>, e vamos colocar:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dotenv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'dotenv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./app/models/product'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> extended<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8003</span><span class="token punctuation">;</span><span class="token keyword">let</span> userDB <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_USER</span><span class="token punctuation">;</span><span class="token keyword">let</span> passwordDB <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_PASSWORD</span><span class="token punctuation">;</span><span class="token keyword">let</span> nameDB <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_NAME</span><span class="token punctuation">;</span><span class="token keyword">let</span> hostDB <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_HOST</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mongodb+srv://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userDB<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>passwordDB<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hostDB<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.mongodb.net/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>nameDB<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?retryWrites=true&amp;w=majority</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>useUnifiedTopology<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useNewUrlParser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Está acontecendo algo."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> message<span class="token operator">:</span> <span class="token string">'Funcionando lindamente!'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Iniciando o server na porta '</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Rotas"><a href="#Rotas" class="headerlink" title="Rotas"></a>Rotas</h3><table><thead><tr><th align="center">Rotas</th><th align="center">http</th><th align="center">Descrição</th></tr></thead><tbody><tr><td align="center">/api/produtos</td><td align="center">GET</td><td align="center">Selecionar todos</td></tr><tr><td align="center">/api/produtos</td><td align="center">POST</td><td align="center">Criar por id</td></tr><tr><td align="center">/api/produtos/:produto_id</td><td align="center">GET</td><td align="center">Selecionar por id</td></tr><tr><td align="center">/api/produtos/:produto_id</td><td align="center">PUT</td><td align="center">Atualizar por id</td></tr><tr><td align="center">/api/produtos/:produto_id</td><td align="center">DELETE</td><td align="center">Excluir por id</td></tr></tbody></table><p>[Update: 13/02/21]</p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> js </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Criando um blog pessoal com Hexo e Github Pages</title>
      <link href="2021/01/31/Criando-um-blog-pessoal-com-Hexo-e-Github-Pages/"/>
      <url>2021/01/31/Criando-um-blog-pessoal-com-Hexo-e-Github-Pages/</url>
      
        <content type="html"><![CDATA[<h2 id="Introducao"><a href="#Introducao" class="headerlink" title="Introdução"></a>Introdução</h2><p>A ideia desse post é fazer um tutorial rápido para que você tenha de forma gratuita um meio de tornar seu estudo documentado e público, assim como diz no artigo <a href="https://segredo.dev/aprenda-em-publico/">“Aprenda em público”</a>. E esse blog tem exatamente esse propósito, além de poder ajudar quem está começando, assim como eu.</p><h2 id="Meu-ambiente-de-desenvolvimento"><a href="#Meu-ambiente-de-desenvolvimento" class="headerlink" title="Meu ambiente de desenvolvimento:"></a>Meu ambiente de desenvolvimento:</h2><p>​    <em>Sistema operacional: Zorin OS</em></p><p>​    <em>NodeJs: v14.15.4</em></p><p>​    <em>NPM: 6.14.11</em></p><h2 id="Requerimentos"><a href="#Requerimentos" class="headerlink" title="Requerimentos"></a>Requerimentos</h2><p>Você vai precisar ter instalado o NodeJS, o NPM e o git</p><p>O git você consegue instalar com o comando:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install git-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Agora o nodeJS e o NPM recomendo que sigam esse <a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall">tutorial</a> ou digitando no terminal:</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># Usando Ubuntu$ curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_14.x | sudo -E bash -$ sudo apt-get install -y nodejs# Usando Debian, como root$ curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_14.x | bash -$ apt-get install -y nodejs# NPM$ sudo apt install npm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Para ter certeza de que foi instalado, digite o comando:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ node -v &amp;&amp; npm -v# saída:v14.15.46.14.11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Instalando-o-Hexo"><a href="#Instalando-o-Hexo" class="headerlink" title="Instalando o Hexo"></a>Instalando o Hexo</h2><p>Para instalar o Hexo usaremos o npm, abra o terminal e digite:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g hexo-cli <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Criando-uma-pagina-com-o-Github-Pages"><a href="#Criando-uma-pagina-com-o-Github-Pages" class="headerlink" title="Criando uma página com o Github Pages"></a>Criando uma página com o Github Pages</h2><p>Acesse o <a href="https://github.com/">Github</a> e clique no <strong>+</strong> no lado direito do site:</p><img src="https://i.imgur.com/f7PIofI.png" alt="github" align='left' /><p>E depois em <code>New repository</code></p><p>O nome do repositório deve ser <code>username.github.io</code> onde <code>username</code> é seu nome de usuário no github. Como exemplo vou usar o meu que é <code>devhector</code>, o repositório deve ser <code>devhector.github.io</code>.</p><h2 id="Criando-um-projeto-para-seu-Github-Pages"><a href="#Criando-um-projeto-para-seu-Github-Pages" class="headerlink" title="Criando um projeto para seu Github Pages"></a>Criando um projeto para seu Github Pages</h2><p>Vamos criar um projeto com o Hexo, para entre na pasta que deseja salvar, abra o teminal no local e digite:</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">hexo init devhector.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Substitua o <code>devhector</code> pelo seu usuário github.</p><p>Entre na pasta do projeto criada:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd devhector.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>E depois:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Levantando-o-server-localmente"><a href="#Levantando-o-server-localmente" class="headerlink" title="Levantando o server localmente"></a>Levantando o server localmente</h2><p>Digite: </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>acesse no navegador: </p><p><code>http://localhost:4000/</code></p><p>Agora seu blog está funcionando, mas localmente.</p><h2 id="Colocando-as-informacoes-do-seu-blog"><a href="#Colocando-as-informacoes-do-seu-blog" class="headerlink" title="Colocando as informações do seu blog"></a>Colocando as informações do seu blog</h2><p>Na pasta raiz vamos editar o <code>_config.yml</code>, eu usarei o <a href="https://micro-editor.github.io/">micro</a>, mas você pode usar o editor de texto que quiser como: <code>nano, vim, gedit...</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo micro _config.yml-------------------------------------------------------------# Sitetitle: Hector Fernandessubtitle: &#39;&#39;description: &#39;Estudante de Eng. de Computação na UFPEL 💻. Esse blog é uma forma de documentar publicamente os meus estudos.&#39;keywords:author: Hector Fernandeslanguage: pt-brtimezone: America&#x2F;Sao_Paulo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Edite da forma que achar melhor. Veja a <a href="https://hexo.io/docs/configuration.html">documentação oficial</a></p><h2 id="Informando-seu-repositorio-Github"><a href="#Informando-seu-repositorio-Github" class="headerlink" title="Informando seu repositório Github"></a>Informando seu repositório Github</h2><p>Primeiro vamos instalar o pacote <code>hexo-deployer-git</code> , digite:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>e edite o  <code>_config.yml</code>, vamos até a parte onde está escrito <code>deploy</code>:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo micro _config.yml-------------------------------------------------------------deploy:  type: git  repo: git@github.com:devhector&#x2F;devhector.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>onde <code>repo:</code> você vai colocar o mesmo de quando usa o <code>git clone</code></p><img src='https://i.imgur.com/bqUGfAw.png' align='left'/><p>Veja a <a href="https://github.com/hexojs/hexo-deployer-git">documentação oficial</a></p><h2 id="Monitorando-os-arquivos-mudados"><a href="#Monitorando-os-arquivos-mudados" class="headerlink" title="Monitorando os arquivos mudados"></a>Monitorando os arquivos mudados</h2><p>Abra uma nova aba do terminal na pasta raiz <code>devhecto.github.io</code> :</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo generate --watch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Isso vai fazer com que o Hexo monitore os arquivos mudados, você pode se aprofundar mais <a href="https://hexo.io/docs/generating.html">aqui</a>.</p><h2 id="Criando-um-post"><a href="#Criando-um-post" class="headerlink" title="Criando um post"></a>Criando um post</h2><p>Para criar um post, digite no terminal:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo new &quot;título do post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>e para editar:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd source&#x2F;_posts&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>e editamos o arquivo <code>titulo-do-post.md</code> criado, usando o <code>markdown</code>.</p><h2 id="Fazendo-o-deploy-do-blog"><a href="#Fazendo-o-deploy-do-blog" class="headerlink" title="Fazendo o deploy do blog"></a>Fazendo o deploy do blog</h2><p>Para finalizar, vamos fazer o deploy, para isso digite:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo clean$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://hexo.io/docs/generating">Documentação oficial</a></p><p>Geralmente para a nossa página ir para o ar na primeira vez, demora em média 30 min. Mas você pode acessar <a href="https://devhector.github.io/">devhector.github.io</a> para testar se o blog já está no ar. (lembrando de sempre substituir o <code>devhector</code> com o seu usuário).</p><p><a href="https://devhector.github.io/2021/02/03/Mudando-o-tema-do-Hexo/">No próximo post, irei mostrar como é simples mudar o tema usando o Hexo.</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> tutorial </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meu primeiro post</title>
      <link href="2021/01/31/Meu-primeiro-post/"/>
      <url>2021/01/31/Meu-primeiro-post/</url>
      
        <content type="html"><![CDATA[<h2 id="Testando-alguns-recursos"><a href="#Testando-alguns-recursos" class="headerlink" title="Testando alguns recursos"></a>Testando alguns recursos</h2><p>Os códigos funcionam da seguinte forma.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>A lista funciona assim:</p><ol><li>lista</li><li>ordenada</li><li>numerada</li></ol><p>lista de tarefas</p><ul><li><input disabled="" type="checkbox"> fazer coisa</li><li><input disabled="" type="checkbox"> fazer outra coisa</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> primeiro-post </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
